 def getLidarInfo(self): 
    #     points = []
    #     for i in range(len(self.points)):
    #         points.append([self.points[i].x,self.points[i].y,self.points[i].z])

    #     points = np.array(points)

    #     # Visualize lidar points
    #     plt.figure(figsize=(8, 6))
    #     plt.scatter(points[:, 1], points[:, 0], s=1)
    #     plt.xlim([-60, 60])
    #     plt.ylim([0, 60])
    #     plt.title('Lidar Points')
    #     plt.xlabel('Y')
    #     plt.ylabel('X')
    #     plt.gca().set_aspect('equal', adjustable='box')
    #     plt.pause(0.0001)

    # def getScanData(self, scanData, viz=False):
    #     if viz:
    #         plt.figure(figsize=(8, 6))
    #         plt.plot(scanData)



def getLidarInfo(lidar):
    pointData = lidar.getPointCloud()
    scanData = lidar.getRangeImage()
    
    points = []
    for i in range(len(pointData)):
        points.append([pointData[i].x,pointData[i].y,pointData[i].z])

    points = np.array(points)
    # visualize
    # pcd.points = o3d.utility.Vector3dVector(points)

    # Visualize lidar points
    plt.figure(figsize=(8, 6))
    plt.scatter(points[:, 1], points[:, 0], s=1)
    plt.xlim([-60, 60])  # Replace xmin and xmax with your desired limits
    plt.ylim([0, 60])
    plt.title('Lidar Points')
    plt.xlabel('Y')
    plt.ylabel('X')
    plt.gca().set_aspect('equal', adjustable='box')
    plt.pause(0.0001)

    # Plot scan data
    plt.figure(figsize=(8, 6))
    plt.plot(scanData)  # Assuming scanData is a 1D array
    plt.title('Scan Data')
    plt.xlabel('Index')
    plt.ylabel('Distance')
    plt.grid(True)
    plt.show()
